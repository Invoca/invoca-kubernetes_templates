# frozen_string_literal: true

require "ostruct"
require "open3"
require "shellwords"
require "yaml"

# This is a base class for all Templates. Derived classes must implement the render method.
module Invoca
  module KubernetesTemplates
    class Template < OpenStruct
      attr_reader :template_path, :variables
      def initialize(template_path, variables)
        @template_path = template_path
        @variables = variables
      end

      def render(args)
        raise "must be defined by subclass"
      end

      private

      def with_auto_generated_yaml_comment(yaml_string)
        comment = <<~EOS
        # WARNING: DO NO EDIT THIS FILE!
        # Any changes made here will be lost.
        # This file is autogenerated from #{template_path}
        EOS
        comment + yaml_string
      end

      class << self
        # @param [String] template_path: file path to template file that needs to be rendered.
        # @param [Hash]: variables that will be used in the template file to generate distict files.
        #
        # @return [String] generated YAML file
        # @return [Hash] Hash of file names as keys with the values being corresponding generated YAML.
        #
        # @raise [UnexpectedFileTypeError] if file type doesn't match [yaml.erb, erb, or jsonnet]
        # @raise [MultiFileJsonnetRenderError] if Jsonnet template files don't follow proper MultiFileJsonnet templating.

        # TODO
        # The ErbTemplate and JsonnetTemplate classes both inherit from the Template class and implement a render method.
        # However, the erb_binding parameter is used just in ErbTemplate, while the jsonnet_library_path parameter is used just in JsonnetTemplate.
        # This is a little awkward. Potentially this could be refactored.
        def render(template_path, variables, erb_binding: nil, jsonnet_library_path: nil)
          new(template_path, variables).render(erb_binding: erb_binding, jsonnet_library_path: jsonnet_library_path)
        end
      end
    end
  end
end
